apply plugin: "com.android.application"
apply plugin: "com.google.gms.google-services"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"  // New React Native plugin system

// import com.android.build.OutputFile

// Configuration for React Native tasks


def enableProguardInReleaseBuilds = false

// project.ext.react = [
//     enableHermes: true,  // clean and rebuild if changing
//     bundleInStagingRelease: true, //include JS bundle in staging builds
//     devDisabledInStagingRelease: true //disable DEV mode in staging builds/ Ensure Hermes is enabled
// ]
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")
 
    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]
 
    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []
 
    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
 
    /* Autolinking */
    // autolinkLibrariesWithApp()
}

    // def enableHermes = project.ext.react.get("enableHermes", false)


apply from: "../../node_modules/react-native/react.gradle"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion  // Set to your compile SDK version
    namespace "com.enforcesolutions"  // Ensure namespace matches applicationId

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17 // Targeting Java 17
    }

    kotlinOptions {
        jvmTarget = "17"  // Targeting JVM 17 for Kotlin
    }

    // JVM Toolchain configuration for Java 17
    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(17))
        }
    }

    // tasks.withType(JavaCompile) {
    //     options.release = 17
    // }

//     stagingRelease {
//             initWith release
//             signingConfig signingConfigs.debug
//             applicationIdSuffix ".staging"
//             matchingFallbacks =  ['release']
// }

    // tasks.named('compileDebugJavaWithJavac') {
    //     dependsOn ':@react-native-community_geolocation:compileDebugAidl'
    //     dependsOn ':@react-native-community_geolocation:generateDebugBuildConfig'
    //     // Add any other dependencies you need to ensure they execute in the correct order
    // }

    defaultConfig {
        applicationId "com.enforcesolutions"  // Must match the namespace
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 7
        versionName "2.0"
        multiDexEnabled true  // Enabling multidex for large apps
        missingDimensionStrategy 'react-native-camera', 'mlkit'  // Example strategy
    }

    // splits {
    //     abi {
    //         reset()
    //         enable true  // Disable ABI splitting (set to true if necessary)
    //         universalApk false
    //         include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'  // Architectures to support
    //     }
    // }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file('new-debug.keystore')
            storePassword '12345678'  // Use your actual passwords
            keyAlias 'key0'
            keyPassword '12345678'
        }
    }

    buildTypes {
        release {

            shrinkResources true  // Shrinks unused resources in release builds
            minifyEnabled true  // Enable Proguard to minify the code
            crunchPngs false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

        externalNativeBuild {
        cmake {
            path "$projectDir/src/main/jni/CMakeLists.txt"
        }
    }
    buildToolsVersion '35.0.0'

    // ABI version codes for different CPU architectures
    // applicationVariants.all { variant ->
    //     variant.outputs.each { output ->
    //         def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
    //         def abi = output.getFilter(OutputFile.ABI)
    //         if (abi != null) {
    //             output.versionCodeOverride = versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
    //         }
    //     }
    // }
}

dependencies {
       implementation("com.facebook.react:react-android")
    implementation ("com.facebook.react:hermes-android")
    // implementation project(':react-native-svg')  // React Native SVG
    // implementation project(':react-native-vector-icons')  // Vector icons support
    // implementation project(':react-native-geolocation-service')  // Geolocation support
    implementation fileTree(dir: "libs", include: ["*.jar"])  // Include local JARs
    implementation 'com.google.android.gms:play-services-base:18.5.0'
    implementation 'com.google.android.gms:play-services-location:21.3.0'
    implementation platform('org.jetbrains.kotlin:kotlin-bom:2.1.0')
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:2.1.0'
    implementation 'androidx.appcompat:appcompat:1.7.0'  // Or the latest version

    // implementation 'com.facebook.react:react-native-codegen'



    // implementation project(path: ':react-native-gesture-handler')  // Gesture handler for React Native

    // Facebook dependencies for React Native
    // implementation "com.facebook.react:react-native:0.76.3" // Replace with your version
    implementation 'com.facebook.fbjni:fbjni-java-only:0.7.0'  // fbjni for native Java-C++ bridge

    // Hermes engine setup for optimized JavaScript execution
    if (hermesEnabled.toBoolean()) {
        implementation "com.facebook.react:hermes-android"
    } else {
        implementation jscFlavor
    }

    // Multidex support for apps with over 64k methods
    implementation 'androidx.multidex:multidex:2.0.1'

    // Optional: Add Flipper for debugging
    // debugImplementation 'com.facebook.flipper:flipper:0.125.0'
    // debugImplementation 'com.facebook.flipper:flipper-network-plugin:0.125.0'
    // debugImplementation 'com.facebook.flipper:flipper-fresco-plugin:0.125.0'
}

